# This is the default template for deploying many resource groups

# each one will contain 2 storage accounts and a number of containers and a private endpoint connected to the Admin Network

trigger: none # will disable CI builds (but not PR builds)

parameters:
- name: environments
  type: object
  default: ['dev','uat'] #,'uat', 'prod']
- name: films
  type: object
  default: ['Ant-Man-and-the-Wasp'] 
  # ['Iron-Man','The-Incredible-Hulk','Iron-Man-2','Thor','Captain-America-The-First-Avenger','Marvels-The-Avengers','Iron-Man-3','Thor-The-Dark-World','Captain-America-The-Winter-Soldier','Guardians-of-the-Galaxy',	'Avengers-Age-of-Ultron','Ant-Man',	'Captain-America-Civil-War','Doctor-Strange',	'Guardians-of-the-Galaxy','Spider-Man-Homecoming','Thor-Ragnarok',	'Black-Panther',	'Avengers-Infinity-War','Ant-Man-and-the-Wasp','Captain-Marvel',	'Avengers-Endgame','Spider-Man-Far-From-Home','Black-Widow',	'Shang-Chi-and-the-Legend-of-the-Ten','Eternals',	'Spider-Man-No-Way-Home','Doctor-Strange-in-the-Multiverse-of-Madness','Thor-Love-and-Thunder',	'Black-Panther-Wakanda-Forever','The-Marvels','Guardians-of-the-Galaxy-Vol-3','Ant-Man-and-the-Wasp-Quantumania','Fantastic-Four']
- name: azureSubscription
  type: string
  default: beards-service-connection
- name: whatIf
  type: boolean
  default: false

stages:
  - ${{ each env in parameters.environments }}:
    - stage: deploy_films_${{ env }}_ResourceGroup
      dependsOn: [] 
      jobs:
        - ${{ each film in parameters.films }}:
          - job: 'Deploy_Resource_Group'
            displayName: 'Deploy ${{ film }} Resource Group'
            variables:          
              - template: variables/${{ film }}-${{ env }}.yaml
            pool:
              vmImage: windows-latest
            steps:
            - checkout: self
              persistCredentials: true
            - task: AzurePowerShell@5
              displayName: Deploy The Bicep
              inputs:
                azureSubscription: ${{ parameters.azureSubscription }}
                ScriptType: 'InlineScript'
                Inline: |
                 $date = Get-Date -Format yyyyMMddHHmmsss
                 $deploymentname = 'Deploy_RG_{0}' -f $date # name of the deployment seen in the activity log
                 Write-Host "Deployment name is $deploymentname"

                 $WhatIfParam = '${{ parameters.whatIf }}'
                 if($WhatIfParam -eq 'false'){
                   $WhatIf = $false
                 }else{
                   $WhatIf = $true
                 }

                  # array params - these are passed in as 'string','string','string'
                  $rgVirtualNetworksSubnetsString = '${{ variables.rgVirtualNetworksSubnets }}'
                  if($rgVirtualNetworksSubnetsString -ne 'null'){
                  $rgVirtualNetworksSubnetsArray = $rgVirtualNetworksSubnetsString.Split(',')
                  } else {
                   $rgVirtualNetworksSubnetsArray = @()
                  }
                  $storageAccountContainersString = '${{ variables.storageAccountContainers }}'
                  if($storageAccountContainersString -ne 'null'){
                  $storageAccountContainersArray = $storageAccountContainersString.Split(',')
                  } else {
                   $storageAccountContainersArray = @()
                  }
               
                 $templateFile = 'Bicep\myCustomResources\MultipleResourceGroups.bicep' 
                  if(Test-Path $templateFile){
                    Write-Host "We have the template file $templateFile"
                  }  else {
                      Write-Warning "Can't deploy without the templatefile $templateFile"
                      [System.Environment]::Exit(1)
                    }
                  
                  $deploymentConfig = @{
                        Name                                    = $deploymentname
                        TemplateFile                            = $templateFile
                        location                                = '${{ variables.location }}'
                        WhatIf                                  = $WhatIf 
                        rgName                                  = '${{ variables.rgName }}'
                        storageAccountName                      = '${{ variables.storageAccountName }}'
                        storageAccountContainers                = $storageAccountContainersArray
                        rgVirtualNetworksSubnets                = $rgVirtualNetworksSubnetsArray
                        peRGVnetSubnet                          = '${{ variables.peRGVnetSubnet }}'
                    }
                    $message = "We are deploying with - {0} " -f ($deploymentConfig | Out-String)
                    Write-Host $message
                    try{
                      New-AzDeployment @deploymentConfig 
                    } catch {
                      Write-Warning "We failed to deploy. Error below"
                      $_  | Format-List -Property * -Force
                      Write-Warning "Maybe more information here"
                      (Get-AzDeploymentOperation -DeploymentName $deploymentname).Properties.response | ConvertTo-Json
                      [System.Environment]::Exit(1)
                    }
                azurePowerShellVersion: '6.3.0'
              env:
                SYSTEM_ACCESSTOKEN: $(system.accesstoken)
                pwsh: true

